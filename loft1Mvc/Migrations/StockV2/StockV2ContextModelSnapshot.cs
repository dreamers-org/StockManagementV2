// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockManagement.Models;

namespace StockManagement.Migrations.StockV2
{
    [DbContext(typeof(StockV2Context))]
    partial class StockV2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StockManagement.Models.Articolo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Annullato");

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Colore")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<DateTime>("DataInserimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DataModifica")
                        .HasColumnType("datetime");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Genere")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<Guid>("IdCollezione");

                    b.Property<Guid>("IdFornitore");

                    b.Property<Guid>("IdTipo");

                    b.Property<bool>("L")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("M")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<double>("PrezzoAcquisto");

                    b.Property<double>("PrezzoVendita");

                    b.Property<bool>("S")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("TagliaUnica");

                    b.Property<DateTime>("TrancheConsegna")
                        .HasColumnType("datetime");

                    b.Property<string>("UtenteInserimento")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("UtenteModifica")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<bool>("Xl")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("XL")
                        .HasDefaultValue(false);

                    b.Property<bool>("Xs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("XS")
                        .HasDefaultValue(false);

                    b.Property<bool>("Xxl")
                        .HasColumnName("XXL");

                    b.Property<bool>("Xxs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("XXS")
                        .HasDefaultValue(false);

                    b.Property<bool>("Xxxl")
                        .HasColumnName("XXXL");

                    b.Property<bool>("isLActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("isMActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("isSActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("isTagliaUnicaActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("isXlActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("isXsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("isXxlActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("isXxsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("isXxxlActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("IdCollezione");

                    b.HasIndex("IdFornitore");

                    b.HasIndex("IdTipo");

                    b.ToTable("Articolo");
                });

            modelBuilder.Entity("StockManagement.Models.ArticoloFoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<byte[]>("Foto");

                    b.Property<Guid>("IdArticolo");

                    b.HasKey("Id");

                    b.ToTable("ArticoloFoto");
                });

            modelBuilder.Entity("StockManagement.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Attivo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("StockManagement.Models.Collezione", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Collezione");
                });

            modelBuilder.Entity("StockManagement.Models.Fornitore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Fornitore");
                });

            modelBuilder.Entity("StockManagement.Models.OrdineCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Completato");

                    b.Property<DateTime>("DataConsegna")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataInserimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DataModifica")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IdCliente");

                    b.Property<Guid>("IdRappresentante");

                    b.Property<Guid?>("IdTipoPagamento");

                    b.Property<bool>("Letto")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<bool>("Pagato");

                    b.Property<bool>("Spedito")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("SpeditoInParte")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("Stampato")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("UtenteInserimento")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("UtenteModifica")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("IdTipoPagamento");

                    b.ToTable("OrdineCliente");
                });

            modelBuilder.Entity("StockManagement.Models.OrdineClienteFoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<byte[]>("Foto");

                    b.Property<Guid>("IdOrdine");

                    b.HasKey("Id");

                    b.ToTable("OrdineClienteFoto");
                });

            modelBuilder.Entity("StockManagement.Models.OrdineFornitore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("DataInserimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DataModifica")
                        .HasColumnType("datetime");

                    b.Property<string>("UtenteInserimento")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("UtenteModifica")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("OrdineFornitore");
                });

            modelBuilder.Entity("StockManagement.Models.PackingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("DataInserimento");

                    b.Property<Guid>("IdArticolo");

                    b.Property<int>("L");

                    b.Property<int>("M");

                    b.Property<int>("S");

                    b.Property<int>("TagliaUnica");

                    b.Property<string>("UtenteInserimento");

                    b.Property<int>("Xl");

                    b.Property<int>("Xs");

                    b.Property<int>("Xxl");

                    b.Property<int>("Xxs");

                    b.Property<int>("Xxxl");

                    b.HasKey("Id");

                    b.ToTable("PackingList");
                });

            modelBuilder.Entity("StockManagement.Models.RigaOrdineCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("DataInserimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DataModifica")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IdArticolo");

                    b.Property<Guid>("IdOrdine");

                    b.Property<int>("L");

                    b.Property<int>("M");

                    b.Property<int>("S");

                    b.Property<bool>("Spedito");

                    b.Property<int>("TagliaUnica");

                    b.Property<string>("UtenteInserimento")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("UtenteModifica")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<int>("Xl")
                        .HasColumnName("XL");

                    b.Property<int>("Xs")
                        .HasColumnName("XS");

                    b.Property<int>("Xxl")
                        .HasColumnName("XXL");

                    b.Property<int>("Xxs")
                        .HasColumnName("XXS");

                    b.Property<int>("Xxxl")
                        .HasColumnName("XXXL");

                    b.HasKey("Id");

                    b.ToTable("RigaOrdineCliente");
                });

            modelBuilder.Entity("StockManagement.Models.RigaOrdineFornitore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("DataInserimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DataModifica")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IdArticolo");

                    b.Property<Guid>("IdOrdine");

                    b.Property<int>("L");

                    b.Property<int>("Larrivato")
                        .HasColumnName("LArrivato");

                    b.Property<int>("M");

                    b.Property<int>("Marrivato")
                        .HasColumnName("MArrivato");

                    b.Property<int>("S");

                    b.Property<int>("Sarrivato")
                        .HasColumnName("SArrivato");

                    b.Property<string>("UtenteInserimento")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("UtenteModifica")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<int>("Xl")
                        .HasColumnName("XL");

                    b.Property<int>("Xlarrivato")
                        .HasColumnName("XLArrivato");

                    b.Property<int>("Xs")
                        .HasColumnName("XS");

                    b.Property<int>("Xsarrivato")
                        .HasColumnName("XSArrivato");

                    b.Property<int>("Xxl")
                        .HasColumnName("XXL");

                    b.Property<int>("Xxlarrivato")
                        .HasColumnName("XXLArrivato");

                    b.Property<int>("Xxs")
                        .HasColumnName("XXS");

                    b.Property<int>("Xxsarrivato")
                        .HasColumnName("XXSArrivato");

                    b.Property<int>("Xxxl")
                        .HasColumnName("XXXL");

                    b.Property<int>("Xxxlarrivato")
                        .HasColumnName("XXXLArrivato");

                    b.HasKey("Id");

                    b.ToTable("RigaOrdineFornitore");
                });

            modelBuilder.Entity("StockManagement.Models.Tipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Tipo");
                });

            modelBuilder.Entity("StockManagement.Models.TipoPagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("Codice");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TipoPagamento");
                });

            modelBuilder.Entity("StockManagement.Models.ViewModels.EditRigaOrdineClienteViewModel", b =>
                {
                    b.Property<Guid>("IdRiga")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodiceArticolo")
                        .IsRequired();

                    b.Property<string>("Colore")
                        .IsRequired();

                    b.Property<int>("L");

                    b.Property<int>("M");

                    b.Property<int>("S");

                    b.Property<int>("TagliaUnica");

                    b.Property<int>("Xl");

                    b.Property<int>("Xs");

                    b.Property<int>("Xxl");

                    b.Property<int>("Xxs");

                    b.Property<int>("Xxxl");

                    b.HasKey("IdRiga");

                    b.ToTable("EditRigaOrdineClienteViewModel");
                });

            modelBuilder.Entity("StockManagement.Models.Articolo", b =>
                {
                    b.HasOne("StockManagement.Models.ArticoloFoto")
                        .WithOne("IdNavigation")
                        .HasForeignKey("StockManagement.Models.Articolo", "Id")
                        .HasConstraintName("FK_ArticoloFoto_Articolo");

                    b.HasOne("StockManagement.Models.Collezione", "IdCollezioneNavigation")
                        .WithMany("Articolo")
                        .HasForeignKey("IdCollezione")
                        .HasConstraintName("FK_Articolo_Collezione1");

                    b.HasOne("StockManagement.Models.Fornitore", "IdFornitoreNavigation")
                        .WithMany("Articolo")
                        .HasForeignKey("IdFornitore")
                        .HasConstraintName("FK_Articolo_Fornitore1");

                    b.HasOne("StockManagement.Models.Tipo", "IdTipoNavigation")
                        .WithMany("Articolo")
                        .HasForeignKey("IdTipo")
                        .HasConstraintName("FK_Articolo_Tipo1");
                });

            modelBuilder.Entity("StockManagement.Models.OrdineCliente", b =>
                {
                    b.HasOne("StockManagement.Models.Cliente", "IdNavigation")
                        .WithOne("OrdineCliente")
                        .HasForeignKey("StockManagement.Models.OrdineCliente", "Id")
                        .HasConstraintName("FK_OrdineCliente_Cliente");

                    b.HasOne("StockManagement.Models.OrdineClienteFoto")
                        .WithOne("IdNavigation")
                        .HasForeignKey("StockManagement.Models.OrdineCliente", "Id")
                        .HasConstraintName("FK_OrdineClienteFoto_OrdineCliente");

                    b.HasOne("StockManagement.Models.TipoPagamento", "IdPagamentoNavigation")
                        .WithMany("OrdineCliente")
                        .HasForeignKey("IdTipoPagamento")
                        .HasConstraintName("FK_OrdineCliente_TipoPagamento");
                });

            modelBuilder.Entity("StockManagement.Models.RigaOrdineCliente", b =>
                {
                    b.HasOne("StockManagement.Models.Articolo", "IdNavigation")
                        .WithOne("RigaOrdineCliente")
                        .HasForeignKey("StockManagement.Models.RigaOrdineCliente", "Id")
                        .HasConstraintName("FK_RigaOrdineCliente_Articolo1");

                    b.HasOne("StockManagement.Models.OrdineCliente", "Id1")
                        .WithOne("RigaOrdineCliente")
                        .HasForeignKey("StockManagement.Models.RigaOrdineCliente", "Id")
                        .HasConstraintName("FK_RigaOrdineCliente_OrdineCliente");
                });

            modelBuilder.Entity("StockManagement.Models.RigaOrdineFornitore", b =>
                {
                    b.HasOne("StockManagement.Models.Articolo", "IdNavigation")
                        .WithOne("RigaOrdineFornitore")
                        .HasForeignKey("StockManagement.Models.RigaOrdineFornitore", "Id")
                        .HasConstraintName("FK_RigaOrdineFornitore_Articolo");

                    b.HasOne("StockManagement.Models.OrdineFornitore", "Id1")
                        .WithOne("RigaOrdineFornitore")
                        .HasForeignKey("StockManagement.Models.RigaOrdineFornitore", "Id")
                        .HasConstraintName("FK_RigaOrdineFornitore_OrdineFornitore");
                });
#pragma warning restore 612, 618
        }
    }
}
